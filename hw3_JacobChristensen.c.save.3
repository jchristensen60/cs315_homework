/**********************************************************************************************
 * Author:      Jacob M. Christensen
 * Course:      CS315
 * Assignment:  Homework #3
 * Purpose:     Implement four operations for a binary search tree implemented via pointers.
 *                  - Insert
 *                  - In-order traversal
 *                  - Pre-order traversal
 *                  - Find
**********************************************************************************************/

#include<stdio.h>
#include<stdlib.h>
#include<stdbool.h>

// Initializing ********* Structure
typedef struct BinaryTreeNode
{
    char data;
    struct BinaryTreeNode *leftChild;
    struct BinaryTreeNode *rightChild;
} BINARY_TREE_NODE;

// Prototype Functions
void insert();
void inOrderTraverse();
void preOrderTraverse();
BINARY_TREE_NODE *find();

/*********************************************************************************************/
int main()
{
    BINARY_TREE_NODE *rootPtr = NULL;
    int userInput = 0;
    bool continueLoop = true;

    do {

        printf("------------------------------------------------------------------------------------\n"
               "Insert[1]   In-Order Traverse[2]    Pre-Order Traverse[3]     Find[4]     Quit[5]: ");
        scanf("%d", &userInput);

        switch (userInput) {

        case 1:
            insert();
            break;
        
        case 2:
            inOrderTraverse();
            break;
        
        case 3:
            preOrderTraverse();
            break;

        case 4:
            find();
            break;

        case 5:
            continueLoop = false;
            break;

        default:
            printf(" *** Invalid Entry ***\n");
            break;
        }

    } while (continueLoop);

    return 0;
}

/*********************************************************************************************/
void insert(BINARY_TREE_NODE **rootPtr)
{
    BINARY_TREE_NODE *insertionPtr = malloc(sizeof(BINARY_TREE_NODE));
    BINARY_TREE_NODE *travelPtr = NULL;

    printf("Enter Character to Insert: ");
    scanf(" %c", &(insertionPtr->data));
    printf("\n");

    if ((*rootPtr) == NULL) {
        (*rootPtr) = insertionPtr;
    }
    else {
        travelPtr = find(rootPtr, insertionPtr->data);
        
    }
}

/*********************************************************************************************/
void inOrderTraverse()
{

}

/*********************************************************************************************/
void preOrderTraverse()
{

}

/*********************************************************************************************/
BINARY_TREE_NODE *find(BINARY_TREE_NODE **rootPtr, int integerToFind)
{
    BINARY_TREE_NODE *travelPtr = (*rootPtr);
    bool continueLoop = true;

    while (continueLoop) {
        if (integerToFind == travelPtr->data) {
            continueLoop = false;
            return travelPtr;
        }
        else if (integerToFind < travelPtr->data) {
            travelPtr = travelPtr->leftChild;
        }
        else if (integerToFind > travelPtr->data) {
            travelPtr = travelPtr->rightChild;
        }
        else {
            continueLoop = false;
            return travelPtr;
        }
    }
}
